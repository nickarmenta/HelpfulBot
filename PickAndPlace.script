def AlignRobot(rawPose):  local newPose=rawPose  newPose[5]=0.0  return newPose end def CNC_Teacher():  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])  set_payload(0.0,[0.0,0.0,0.0])  set_gravity([0.0, 0.0, 9.82])  # Setup sequence and prompts  global partMass=request_float_from_primary_client("Enter part weight in kilograms (2.2lbs/kg)")  # Get part length (mm)  global CoG_Z=request_float_from_primary_client("Enter part length in millimeters (25.4mm/in)")  # Create new center of gravity based on part length  global CoG_Z=CoG_Z/2000+.05  # Get part diameter (mm)  global palletGap=request_float_from_primary_client("Enter part diameter in millimeters (24.5mm/in)")  global palletGap=palletGap/500  # Get rows in pallet  global pallet_rows=request_integer_from_primary_client("How many rows in pallet?")  # Get columns in pallet  global pallet_columns=request_integer_from_primary_client("How many columns in pallet?")  # Initialize rows and columns  global cur_row=0  global cur_column=0  # Get gripper open/close input  global gripperOutput=request_integer_from_primary_client("Which output is the gripper wired to?")  # Get gripper open/close input  global cycle_output=request_integer_from_primary_client("Which output is the machine wired to?")  # Create pick, approch, and depart positions  local pick_test=False   while (pick_test==False):   # Open gripper and get pick position 	 set_digital_out(gripperOutput, False) 	 sleep(0.5)   freedrive_mode()   popup("Move robot to pick position then press continue", "Message", False, False, blocking=True)   set_digital_out(gripperOutput, True) 	 sleep(0.5)   end_freedrive_mode() 	 # Create positions and test   global pickPose=AlignRobot(get_actual_tcp_pose())   global appr_pickPose= pose_trans(get_actual_tcp_pose (), p[0,0,-palletGap,0,0,0])   global dprt_pickPose= pose_trans(get_actual_tcp_pose (), p[0,CoG_Z,0,0,0,0])   set_digital_out(0, False) 	 sleep(0.25) 	 movel(appr_pickPose, a=0.125, v=0.2)   movel(pickPose, a=0.125, v=0.2)   set_digital_out(0, True) 	sleep(0.5)   # Confirm position correct   global pick_test=request_boolean_from_primary_client("Pick OK?")  end  # Release part from chuck and exit machine  set_digital_out(1, False)  sleep(0.5)  movel(dprt_pickPose, a=0.125, v=0.2, r=0.025)  movej(inmachine_pos, a=0.5, v=1 r=0.1)  movej(approachPick, a=0.5, v=1.  # Create initial pallet position  freedrive_mode()  popup("Move robot one inch above first pallet position then press continue", "Message", False, False, blocking=True)  end_freedrive_mode()  global pallet_pos=pose_add(p[0,0,-.05,0,0,0], get_actual_tcp_pose ())  sleep(0.1)  # Do downward force move to surface  zero_ftsensor()  force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 1, 1, 0], [0.0, 0.0, -5.0, 0.05, 0.05, 0.1], 3, [0.1, 0.1, 0.15, 0.05235987755982989, 0.05235987755982989, 0.3490658503988659])  movel(pallet_pos, a=0.05, v=0.05)  end_force_mode()  stopl(5.0)  # Create first pallet position just above surface  global pallet_pos= pose_add (p[0,0,0.003,0,0,0], get_actual_tcp_pose ())  global depart_pallet= pose_trans (pallet_pos, p[0,0,-palletGap,0,0,0])  global approachPlace=pose_add(p[0,0,CoG_Z*1.3,0,0,0], pallet_pos)  movel(approachPlace, a=0.125, v=0.2, r=0.025)  movej(approachPick, a=0.5235987755982988, v=1.0471975511965976)  popup("Program created! Take your part back", "Message", False, False, blocking=True)   def Create_pallet_position():   global pallet_offset=p[cur_row*palletGap,cur_column*palletGap,0,0,0,0]   global cur_approach= pose_add (approachPlace, pallet_offset)   global cur_position= pose_add (pallet_pos, pallet_offset)   global cur_depart= pose_add (depart_pallet, pallet_offset)   if (cur_row == pallet_rows):    global cur_row=0    global cur_column=cur_column+1   end   global cur_row=cur_row+1  end   # Run program  while (True):   # Go to pick part 	movej(approachPick, a=3, v=1.5)   movej(inmachine_pos, a=3, v=1.5, r=0.2)   movej(appr_pickPose, a=3, v=1.5)   movel(pickPose, a=0.25, v=0.25)   set_digital_out(0, True) 	sleep(0.25) 	# Open chuck and remove part   set_digital_out(1, False)   sleep(0.5)   movel(dprt_pickPose, a=0.25, v=0.25)   movej(inmachine_pos, a=3, v=1.5, r=0.1)   movej(approachPick, a=3, v=1.5, r=0.1)   # Palletize routine 	Create_pallet_position()   movej(cur_approach, a=3, v=1.5)   movel(cur_position, a=0.25, v=0.25)   set_digital_out(0, False) 	sleep(0.25)   movel(cur_depart, a=0.25, v=0.25)  end end 