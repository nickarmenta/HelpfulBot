def unnamed():
  step_count_18990c16_cca2_411e_a112_dfd620f5a325 = 0.0
  thread Step_Counter_Thread_addf4917_00fd_4f5c_9a3a_be1e4f397336():
    while (True):
      step_count_18990c16_cca2_411e_a112_dfd620f5a325 = step_count_18990c16_cca2_411e_a112_dfd620f5a325 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_addf4917_00fd_4f5c_9a3a_be1e4f397336()
  set_gravity([0.0, 0.0, 9.82])
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_target_payload(0.000000, [0.000000, 0.000000, 0.000000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  global palletGap=0.1
  global gripperOutput=0
  global departPick=p[-0.18315, -0.43973, 0.17944, -0.0013, 3.12063, 0]
  global palletPose=p[-0.18473, -0.43973, 0.18074, -0.00139, 3.12706, 0]
  global approachPallet=p[-0.18473, -0.43973, 0.08324, -0.00139, 3.12706, 0]
  global cur_approach=""
  global cur_position=p[0, 0, 0, 0, 0, 0]
  global cycleInput=1
  global cur_depart=p[0, 0, 0, 0, 0, 0]
  global departPallet=p[-0.18582, -0.43973, 0.25573, -0.00139, 3.12706, 0]
  global activeCol=0
  global approachPlace=p[-0.1863, -0.43973, 0.32941, -0.0013, 3.12063, 0]
  global activeRow=0
  global partInput=0
  global departPlace=p[-0.18473, -0.43973, 0.25443, -0.0013, 3.12063, 0]
  global palletRows=4
  global palletCols=4
  global partMass=2
  global CoG_Z=0.075
  global pickPose=p[-0.18158, -0.43973, 0.10446, -0.0013, 3.12063, 0]
  global relayPose=p[-0.18315, -0.43973, 0.17944, -0.0013, 3.12063, 0]
  global approachPick=p[-0.18473, -0.43973, 0.25443, -0.0013, 3.12063, 0]
  global palletOffset=p[0, 0, 0, 0, 0, 0]
  global placePose=p[-0.18315, -0.43973, 0.17944, -0.0013, 3.12063, 0]
  global cycleOutput=1
  while (True):
    $ 1 "Robot Program"
    $ 2 "Script: PickAndPlace.script"
    def Setup():
      # Setup sequence and prompts
      partMass=request_float_from_primary_client("How much does your part weigh in kilos? (2.2lbs/kg)")
      # Get part length (mm)
      local height=request_float_from_primary_client("How tall is the part in millimeters? (25.4mm/in)")
      # Create new center of gravity based on part length
      CoG_Z=height/2000+.05
      # Get part diameter (mm)
      local width=request_float_from_primary_client("How wide is the part in millimeters? (24.5mm/in)")
      palletGap=width/500
      # Get rows in pallet
      palletRows=request_integer_from_primary_client("How many rows do you want to make?")
      # Get columns in pallet
      palletCols=request_integer_from_primary_client("How many columns do you want to make?")
      # Get gripper open/close output
      gripperOutput=request_integer_from_primary_client("Which output is my gripper wired to?")
      # Get machine cycle output
      cycleOutput=request_integer_from_primary_client("Which output is your machine wired to?")
      # Get part sensor input
      partInput=request_integer_from_primary_client("Which input tells me the part is there?")
      # Get cycle finished input
      cycleInput=request_integer_from_primary_client("Which input tells me the machine is done?")
    end
    
    def AlignRobot(rawPose):
      set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
      set_payload(0.0,[0.0,0.0,0.0])
      set_gravity([0.0, 0.0, 9.82])
      local newPose=rawPose
      newPose[5]=0.0
      return newPose
    end
    
    def TeachPick():
      # Create pick, approach, and depart positions
      local pickTest=False
      while (pickTest==False):
        # Open gripper and get pick position
        popup("Hold this part, I'm about to drop it!", "Message", False, False, blocking=True)
        set_digital_out(gripperOutput, False)
        freedrive_mode()
        popup("Move me to where you want to grab the part!", "Message", False, False, blocking=True)
        end_freedrive_mode()
        pickPose=AlignRobot(get_actual_tcp_pose())
        movel(pickPose, a=0.125, v=0.2)
        freedrive_mode()
        set_digital_out(gripperOutput, True)
        sleep(0.5)
        end_freedrive_mode()
    
        # Create positions and test
        approachPick=pose_trans(pickPose, p[0,0,-CoG_Z*2,0,0,0])
        departPick=pose_trans(pickPose, p[0,0,-CoG_Z,0,0,0])
        popup("Alright let me try!", "Message", False, False, blocking=True)
        set_digital_out(gripperOutput, False)
        sleep(0.5)
        movel(approachPick, a=0.125, v=0.2)
        movel(pickPose, a=0.125, v=0.2)
        set_digital_out(gripperOutput, True)
        sleep(0.5)
        movel(departPick, a=0.125, v=0.2)
    
        # Confirm position correct
        pickTest=request_boolean_from_primary_client("Did I pick it okay??")
      end
    end
    
    def TeachRelay():
      # Move to relay position
      freedrive_mode()
      popup("Move me to a safe spot between the pick and place points", "Message", False, False, blocking=True)
      end_freedrive_mode()
      relayPose=get_actual_tcp_pose()
    end
    
    def TeachPlace():
      local placeTest=False
      while (placeTest==False):
        # Move to place position
        freedrive_mode()
        popup("Move me to where you want to put your part!", "Message", False, False, blocking=True)
        end_freedrive_mode()
        placePose=AlignRobot(get_actual_tcp_pose())
        set_digital_out(gripperOutput, False)
        sleep(0.5)
    
        # Create positions and test
        approachPlace=pose_trans(placePose, p[0,0,-CoG_Z*2,0,0,0])
        departPlace=pose_trans(placePose, p[0,0,-CoG_Z,0,0,0])
        popup("Alright let me try!", "Message", False, False, blocking=True)
        set_digital_out(gripperOutput, True)
        sleep(0.5)
        movel(approachPlace, a=0.125, v=0.2)
        movel(placePose, a=0.125, v=0.2)
        set_digital_out(gripperOutput, True)
        sleep(0.5)
        movel(departPlace, a=0.125, v=0.2)
    
        # Confirm position correct
        placeTest=request_boolean_from_primary_client("Did I place the part okay?")
      end
    end
    
    def TeachPallet():
      local palletTest=False
      while (palletTest==False):
        freedrive_mode()
        popup("Move me just above where you want to start putting your finished parts", "Message", False, False, blocking=True)
        end_freedrive_mode()
        local seekPose=AlignRobot(pose_add(p[0,0,-.075,0,0,0], get_actual_tcp_pose()))
        # Do downward force move to surface
        zero_ftsensor()
        force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [0, 0, 1, 1, 1, 0], [0.0, 0.0, -5.0, 0.05, 0.05, 0.1], 3, [0.1, 0.1, 0.15, 0.05, 0.05, 0.3])
        movel(seekPose, a=0.05, v=0.05)
        end_force_mode()
        stopl(5.0)
        # Create first pallet position just above surface
        palletPose=AlignRobot(pose_add(p[0,0,0.003,0,0,0], get_actual_tcp_pose()))
        approachPallet=pose_add(p[0,0,-CoG_Z*1.3,0,0,0], palletPose)
        departPallet=pose_trans(palletPose, p[0,0,-CoG_Z,0,0,0])
        # Test pallet routine
        popup("Alright let me try!", "Message", False, False, blocking=True)
        movel(approachPallet, a=0.125, v=0.2)
        movel(palletPose, a=0.125, v=0.2)
        set_digital_out(gripperOutput, False)
        movel(departPallet, a=0.125, v=0.2)
        palletTest=request_boolean_from_primary_client("Did I place the part okay?")
      end
    end
    
    def CreatePalletPose():
      palletOffset=p[activeRow*palletGap,activeCol*palletGap,0,0,0,0]
      cur_approach=pose_add(approachPallet, palletOffset)
      cur_position=pose_add(palletPose, palletOffset)
      cur_depart= pose_add(departPallet, palletOffset)
      activeCol=activeCol+1
      activeRow=activeRow+1
      if (activeRow>palletRows):
        activeRow=0
      end
      if (activeCol>palletCols):
        activeCol=0
      end
    end
    
    def PnPWizard():
      Setup()
      TeachPick()
      TeachRelay()
      TeachPlace()
      TeachPallet()
      popup("Make sure to save this so that I can remember it!", "Message", False, False, blocking=True)
    end
    
    def PickCycle():
      # Go to pick part
      movej(approachPick, a=3, v=1.5)
      movel(pickPose, a=0.25, v=0.25)
      set_digital_out(gripperOutput, True)
      sleep(0.5)
      movel(departPick, a=0.25, v=0.25)
    end
    
    def PlaceCycle():
      movej(approachPlace, a=3, v=1.5, r=0.2)
      movel(placePose, a=0.25, v=0.25)
      set_digital_out(gripperOutput, False)
      sleep(0.5)
      movel(departPlace, a=0.25, v=0.25)
    end
    
    def RunProgram():
      local setupCheck=request_boolean_from_primary_client("Have you already taught me what to do?")
      if (setupCheck==False or pickPose[0]==0):
        PnPWizard()
      end
      local partDetected=read_input_boolean_register(partInput)
      local cycleFinished=False
      while (True):
        # If part is ready
        if (partDetected==True):
          PickCycle()
          movej(relayPose, a=3, v=1.5, r=0.2)
          PlaceCycle()
          movej(relayPose, a=3, v=1.5, r=0.2)
    
          # Pulse cycle output
          set_digital_out(cycleOutput, True)
          sleep(0.5)
          set_digital_out(cycleOutput, False)
    
          while (cycleFinished==False):
            cycleFinished=read_input_boolean_register(cycleInput)
          end
    
          # Pick part
          movej(approachPlace, a=3, v=1.5, r=0.2)
          movel(placePose, a=0.25, v=0.25)
          set_digital_out(gripperOutput, True)
          sleep(0.5)
          movel(departPlace, a=0.25, v=0.25)
    
          # Palletize routine
          CreatePalletPose()
          movej(relayPose, a=3, v=1.5, r=0.2)
          movej(cur_approach, a=3, v=1.5)
          movel(cur_position, a=0.25, v=0.25)
          set_digital_out(gripperOutput, False)
          sleep(0.5)
          movel(cur_depart, a=0.25, v=0.25)
        end
        partDetected=read_input_boolean_register(partInput)
      end
    end
    
    RunProgram()
  end
end
