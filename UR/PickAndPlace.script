# Author: Nick Armenta
# Date: 12/15/21

def Setup():
  # Grab values from installation file
  gripperMass=get_target_payload()
  CoG=get_target_payload_cog()
  tcpOffset=get_tcp_offset()
end

def Prompts():
  # Setup sequence and prompts
  partMass=request_float_from_primary_client("How much does your part weigh in kilos? (2.2lbs/kg)")
  # Get part length in meters
  partHeight=request_float_from_primary_client("How tall is the part in millimeters? (25.4mm/in)")/1000
  # Get part diameter in meters
  partWidth=request_float_from_primary_client("How wide is the part in millimeters? (24.5mm/in)")/1000
  # Get rows in pallet
  palletRows=request_integer_from_primary_client("How many rows do you want to make?")
  # Get columns in pallet
  palletCols=request_integer_from_primary_client("How many columns do you want to make?")
  # Get gripper open/close output
  gripperOutput=request_integer_from_primary_client("Which output is my gripper wired to?")
  # Get machine cycle output
  cycleOutput=request_integer_from_primary_client("Which output is your machine wired to?")
  # Get part sensor input
  partInput=request_integer_from_primary_client("Which input tells me the part is there?")
  # Get cycle finished input
  cycleInput=request_integer_from_primary_client("Which input tells me the machine is done?")
end

def AlignRobot(rawPose):
  local newPose=rawPose
  newPose[5]=0.0
  return newPose
end

def Pick():
  set_digital_out(gripperOutput, True)
  local payload=partMass+gripperMass
  set_payload(payload,[CoG[0],CoG[1],partHeight/2+.05])
  sleep(0.5)
end

def Place():
  set_digital_out(gripperOutput, False)
  set_payload(gripperMass,CoG)
  sleep(0.5)
end

def TeachPick():
  # Create pick, approach, and depart positions
  local pickTest=False  
  while (pickTest==False):
    # Open gripper and get pick position
    popup("Hold this part, I'm about to drop it!", "Message", False, False, blocking=True)
    set_digital_out(gripperOutput, False)
    freedrive_mode()
    popup("Move me to where you want to grab the part!", "Message", False, False, blocking=True)
    end_freedrive_mode()
    pickPose=AlignRobot(get_actual_tcp_pose())
    movel(pickPose, a=0.125, v=0.2)
    freedrive_mode(freeAxes=[1,1,0,0,0,0], feature="tool")
    Pick() 
    end_freedrive_mode()
    
    # Create positions and test
    approachPick=pose_trans(pickPose, p[0,0,-partHeight/2,0,0,0])
    departPick=pose_trans(pickPose, p[0,0,-partHeight,0,0,0])
    popup("Alright let me try!", "Message", False, False, blocking=True)
    Place()
    movel(approachPick, a=0.125, v=0.2)
    movel(pickPose, a=0.125, v=0.2)
    Pick()
    movel(departPick, a=0.125, v=0.2)

    # Confirm position correct
    pickTest=request_boolean_from_primary_client("Did I pick it okay??")
  end
end

def TeachRelay():
  # Move to relay position
  freedrive_mode(freeAxes=[1,1,1,0,0,0], feature="tool")
  popup("Move me to a safe spot between the pick and place points", "Message", False, False, blocking=True)
  end_freedrive_mode()
  relayPose=get_actual_tcp_pose()
end

def TeachPlace():
  local placeTest=False
  while (placeTest==False):
    # Move to place position
    freedrive_mode()
    popup("Move me to where you want to put your part!", "Message", False, False, blocking=True)
    end_freedrive_mode()
    placePose=get_actual_tcp_pose()
    Place()
    
    # Create positions and test
    approachPlace=pose_trans(placePose, p[0,0,-partHeight,0,0,0])
    departPlace=pose_trans(placePose, p[0,0,-partHeight/2,0,0,0])
    popup("Alright let me try!", "Message", False, False, blocking=True)
    Pick()
    movel(approachPlace, a=0.125, v=0.2)
    movel(placePose, a=0.125, v=0.2)
    Place()
    movel(departPlace, a=0.125, v=0.2)

    # Confirm position correct
    placeTest=request_boolean_from_primary_client("Did I place the part okay?")
  end
end

def TeachPallet():
  local palletTest=False
  while (palletTest==False):
    freedrive_mode()
    popup("Move me to where you want to start putting your parts", "Message", False, False, blocking=True)
    end_freedrive_mode()
    
    # Create first pallet position just above surface
    palletPose=AlignRobot(pose_add(p[0,0,0.003,0,0,0], get_actual_tcp_pose()))
    movel(palletPose, a=0.125, v=0.2)
    Place()
    approachPallet=pose_add(p[0,0,-partHeight,0,0,0], palletPose)
    departPallet=pose_trans(palletPose, p[0,0,-partHeight/2,0,0,0])

    # Test pallet routine
    popup("Alright let me try!", "Message", False, False, blocking=True)
    Pick()
    movel(approachPallet, a=0.125, v=0.2)
    movel(palletPose, a=0.125, v=0.2)
    Place()
    movel(departPallet, a=0.125, v=0.2)
    palletTest=request_boolean_from_primary_client("Did I place the part okay?")
  end
end

def CreatePalletPose():
  local palletGap=partWidth*1.5
  palletOffset=p[activeRow*palletGap,activeCol*palletGap,0,0,0,0]
  cur_approach=pose_add(approachPallet, palletOffset)
  cur_position=pose_add(palletPose, palletOffset)
  cur_depart= pose_add(departPallet, palletOffset)
  activeCol=activeCol+1
  activeRow=activeRow+1
  if (activeRow>palletRows):
    activeRow=0
  end
  if (activeCol>palletCols):
    activeCol=0
  end
end
  
def Wizard():
  Setup()
  Prompts()
  TeachPick()
  TeachRelay()
  TeachPlace()
  TeachPallet()
  popup("Make sure to save this so that I can remember it!", "Message", False, False, blocking=True)
end

def PickRaw():
  # Go to pick part
  movej(approachPick, a=3, v=1.5)
  movel(pickPose, a=0.25, v=0.25)
  Pick()
  movel(departPick, a=0.25, v=0.25)
end

def PlaceRaw():
  movej(approachPlace, a=3, v=1.5, r=0.2)
  movel(placePose, a=0.25, v=0.25)
  Place()
  movel(departPlace, a=0.25, v=0.25)
end

def PickFinished():
  # Pick part
  movej(approachPlace, a=3, v=1.5, r=0.2)
  movel(placePose, a=0.25, v=0.25)
  Pick()
  movel(departPlace, a=0.25, v=0.25)
end

def PlaceFinished():
  movej(cur_approach, a=3, v=1.5)
  movel(cur_position, a=0.25, v=0.25)
  Place()
  movel(cur_depart, a=0.25, v=0.25)
end

def RunProgram():
  local setupCheck=request_boolean_from_primary_client("Have you already taught me what to do?")
  if (setupCheck==False or pickPose[0]==0):
    Wizard()
  end
  local partDetected=get_digital_in(partInput)
  local cycleFinished=False
  while (True):
    # If part is ready
    if (partDetected==True):
      PickRaw()
      movej(relayPose, a=3, v=1.5, r=0.2)
      PlaceRaw()
      movej(relayPose, a=3, v=1.5)

      # Pulse cycle output
      set_digital_out(cycleOutput, True)
      sleep(0.1)
      set_digital_out(cycleOutput, False)

      while (cycleFinished==False):
        cycleFinished=get_digital_in(cycleInput)
        sync()
      end

      PickFinished()
      # Palletize routine
      CreatePalletPose()
      movej(relayPose, a=3, v=1.5, r=0.2)
      PlaceFinished()
      movej(relayPose, a=3, v=1.5, r=0.2)
      movej(approachPick, a=3, v=1.5)
    end
    partDetected=get_digital_in(partInput)
  sync()
  end
end

RunProgram()
